apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

group = 'com.commercetools'
version = '1.0-SNAPSHOT'

description = "Java library that provides different modules to synchronise your new commercetools project data to your " +
        "existing commercetools project."

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

ext {
    commercetoolsJvmSdkVersion =  '1.12.0'
    mockitoVersion = '1.10.19'
    slf4jVersion = '1.6.2'
    jUnitVersion = '4.12'
    assertjVersion = '3.6.1'
    checkstyleVersion = '7.7'
    pmdVersion = '5.6.1'
    jacocoVersion = '0.7.9'
    findbugsVersion = '3.0.1'
}

repositories {
    mavenCentral()
    jcenter()
}
dependencies {
    compile group: 'com.commercetools.sdk.jvm.core', name: 'commercetools-models', version: commercetoolsJvmSdkVersion
    compile group: 'com.commercetools.sdk.jvm.core', name: 'commercetools-java-client', version: commercetoolsJvmSdkVersion
    compile group: 'com.commercetools.sdk.jvm.core', name: 'commercetools-convenience', version: commercetoolsJvmSdkVersion
    runtime group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockitoVersion
    testCompile group: 'junit', name: 'junit', version: jUnitVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertjVersion
}

checkstyle {
    toolVersion = checkstyleVersion
    config = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml')
    maxWarnings = 0 // If warnings exceed this number, build should fail.
}

pmd {
    toolVersion = pmdVersion
    ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/pmd.xml')
    rulePriority = 2 // If a rule priority, with a level greater than or equal this number, is violated; the build should fail.
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8 // test coverage should be at a minimum of 80%, otherwise build would fail.
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        xml.destination = "${buildDir}/reports/jacoco/report.xml"
        html.enabled = false
        csv.enabled = false
    }
}

findbugs {
    toolVersion = findbugsVersion
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled =  true
        html.stylesheet = resources.text.fromFile('config/findbugs/findbugs-custom.xsl')
    }
}

check.dependsOn jacocoTestCoverageVerification // Build should fail if jacocoTestCoverageVerification task rules are not fulfilled.
test.finalizedBy jacocoTestReport